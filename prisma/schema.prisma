generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// wichtig einen cascaded delete einfügen, damit die Datenbank nicht überquillt
// zum datenschütz können wir die autoren nullen:
// author   User   @relation("UserPosts", fields: [authorId], references: [id], onDelete: SetNull)

model User {
  id                  String    @id @default(uuid()) @db.Uuid
  username            String    @unique // unique username
  firstname           String // wenn kein ? dann ist es ein Pflichtfeld
  lastname            String // wenn kein ? dann ist es ein Pflichtfeld
  birthdate           DateTime
  email               String    @unique // needed for verification or restoring
  phone               String    @unique // for 2FA 
  role                UserRoles @default(ADULT)
  isPedagogicalAuthor Boolean   @default(false) // wir wollten das Pädagogische Authoren Hervorgehoben werden
  password            String // hashed password
  passwordResetToken  String? // token for password reset
  hashedRefreshToken  String? // hashed refresh token
  profilePicture      String? // optional | claudinary
  publicid_picture    String? // optional | claudinary
  shortDescription    String? // optional
  bio                 String? // optional

  // UserFile relation - fixed one-to-one relation
  userFile   UserFile? @relation("UserToFile", fields: [userFileId], references: [id], onDelete: Cascade)
  userFileId String?   @unique @db.Uuid

  // Relations
  // Bidirektionale Freundschaft: explizit zwei Seiten definieren (self relation!)

  friendshipInvites   FriendRequest[] @relation("SendRequests") // ich habe eine Freundschaftsanfrage gesendet
  friendshipsReceived FriendRequest[] @relation("ReceivedRequest") // ich habe eine Freundschaftsanfrage erhalten

  // friendships

  friendshipInitated Friendship[] @relation("Initiator") // ich habe diese Freundschaft initiiert
  friendshipAccepted Friendship[] @relation("Receiver") // ich habe diese Freundschaft erhalten

  // verlinkung der Eltern -> das sind Selfrelations
  parent1   User?   @relation("Parent1", fields: [parent1Id], references: [id])
  parent1Id String? @db.Uuid // hier wird dann eingetragen wer der erste Elternteil ist

  parent2   User?   @relation("Parent2", fields: [parent2Id], references: [id])
  parent2Id String? @db.Uuid // hier wird dann eingetragen wer der zweite Elternteil ist

  childrendAsParent1 User[] @relation("Parent1") // hier wird dann eingetragen wer der erste Elternteil ist
  childrendAsParent2 User[] @relation("Parent2") // hier wird dann eingetragen wer der zweite Elternteil ist

  // all children: const allChildren = [...user.childrenAsParent1, ...user.childrenAsParent2];

  writtenPosts    Post[]    @relation("UserPosts") // geschriebene Posts
  writtenComments Comment[] @relation("UserComments") // geschriebene Kommentare
  writtenRatings  Rating[]  @relation("UserRatings") // geschriebene Bewertungen
  readPosts       History[]

  // Articles, Posts (written / moderated)
  moderatedPosts Post[]   @relation("ModeratorPosts") // wenn ein Moderator einen Post moderiert
  // Admin Meta
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  verified               Boolean                  @default(false) // means this user has verified his email
  EmailVerificationToken EmailVerificationToken[]

  // deletions
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  deletedBy     String?   @db.Uuid // userId -> hier wird dann eingetragen wer den User gelöscht hat
  deletedByUser User?     @relation("UserDeletedBy", fields: [deletedBy], references: [id], onDelete: SetNull) // userId -> hier wird dann eingetragen welcher moderator den User gelöscht hat
  deleteReason  String?
  deactivated   Boolean   @default(false)

  // applications
  applications          Application[] @relation("Applications") // damit können wir später einfach erweitern
  authorizedBy          String?       @db.Uuid // userId -> hier wird dann eingetragen wer den Autor angenommen hat
  authorizedAt          DateTime? // hier wird dann eingetragen wann der Autor angenommen wurde
  blockedForApplication Boolean       @default(false) // hier wird dann eingetragen ob der User für die Bewerbung blockiert ist

  // gegen entinitäten
  deletedPosts    Post[]    @relation("PostDeletedBy") // alle Posts, die dieser User gelöscht hat
  deletedComments Comment[] @relation("CommentDeletedBy") // alle Kommentare, die dieser User gelöscht hat
  deletedRatings  Rating[]  @relation("RatingDeletedBy") // alle Bewertungen, die dieser User gelöscht hat
  deletedUsers    User[]    @relation("UserDeletedBy")

  // besonderheiten für Moderatoren
  moderatedBy     String?   @db.Uuid // userId -> hier wird dann eingetragen wer den Moderator angenommen hat
  moderatedByUser User?     @relation("ModeratedByUser", fields: [moderatedBy], references: [id]) // hier geht um bearbeitete Profile
  moderatedAt     DateTime? // hier wird dann eingetragen wann der Moderator angenommen wurde
  moderatedUsers  User[]    @relation("ModeratedByUser")
  handelTickets   Ticket[]  @relation("WorkedByUser") // hier werden alle Tickets gespeichert

  // useLess relations
  TicketMessage TicketMessage[]
  Application   Application[]   @relation("ApplicationMod")
  CommentRating CommentRating[]

  Feedback Feedback[]

  FeedbackResponse FeedbackResponse[]

  Notification Notification[]
}

model EmailVerificationToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String // optional: verschlüsseln, falls nötig
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model UserFile {
  id String @id @default(uuid()) @db.Uuid

  // Fixed one-to-one relation with User
  user User? @relation("UserToFile")

  tickets Ticket[] @relation("UserFile") // hier werden alle Tickets gespeichert

  // später können hier noch reports und oder berichte und der gleichen rein

  // Notes           String? // von mods für mods
  // vielleicht tickets in unterschiedliche Kategorien?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRoles {
  ADULT
  CHILD
  AUTHOR
  MODERATOR
  ADMIN
}

model Application {
  id     String  @id @default(uuid()) @db.Uuid
  userId String? @db.Uuid
  user   User?   @relation("Applications", fields: [userId], references: [id], onDelete: SetNull)

  modId String? @db.Uuid
  mod   User?   @relation("ApplicationMod", fields: [modId], references: [id], onDelete: SetNull)

  status  ApplicationStatus @default(PENDING)
  phone   String // Telefonnummer -> für Rückfragen
  email   String // E-Mail-Adresse -> für Rückfragen
  content String // freier Text,

  referenceDocument ApplicationDocument[] // hier werden die Referenzdokumente gespeichert
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

model ApplicationDocument {
  id            String      @id @default(uuid()) @db.Uuid
  applicationId String      @db.Uuid
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  url        String // die Cloudinary-URL
  publicId   String // die Cloudinary-Public-ID → wichtig zum Löschen!
  type       ApplicationDocType @default(OTHER)
  uploadedAt DateTime           @default(now())
}

enum ApplicationStatus {
  PENDING // Noch nicht bearbeitet
  IN_PROGRESS // in Bearbeitung
  ACCEPTED // angenommen
  REJECTED // abgelehnt
  CANCELED // abgebrochen
}

enum ApplicationDocType {
  RESUME
  COVER_LETTER
  CERTIFICATION
  OTHER
}

model Friendship {
  id String @id @default(uuid()) @db.Uuid

  initiatorId String @db.Uuid
  receiverId  String @db.Uuid

  initiator User @relation("Initiator", fields: [initiatorId], references: [id], onDelete: Cascade) // userId -> hier wird dann eingetragen wer die Anfrage gesendet hat
  receiver  User @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade) // userId -> hier wird dann eingetragen wer die Anfrage empfangen hat

  createdAt DateTime @default(now())

  @@unique([initiatorId, receiverId]) // einzigartige Freundschaft um doppelte Anfragen zu vermeiden
}

model FriendRequest {
  id         String @id @default(uuid()) @db.Uuid
  senderId   String @db.Uuid // userId -> hier wird dann eingetragen wer die Anfrage gesendet hat
  receiverId String @db.Uuid // userId -> hier wird dann eingetragen wer die Anfrage empfangen hat

  sender   User @relation("SendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedRequest", fields: [receiverId], references: [id], onDelete: Cascade)

  status      FriendRequestStatus @default(PENDING)
  createdAt   DateTime            @default(now())
  responsedAt DateTime?

  @@unique([senderId, receiverId]) // einzigartige Freundschaft um doppelte Anfragen zu vermeiden 
}

enum FriendRequestStatus {
  PENDING // Anfrage gesendet
  REJECTED // Anfrage abgelehnt
  BLOCKED // Anfrage blockiert
  // ACCEPTED // unnötig, da Freundschaftsrelationen bereits die Akzeptanz abbilden
  CANCELED // Anfrage abgebrochen
}

enum TicketCategory {
  WEBSITE_BUG
  REPORT
  ACCOUNT
  TECHNICAL
  OTHER // für alle anderen Kategorien, die nicht in der Liste sind
}

// ticket kann man im Support erstellen, und dann wird es noch eine meldefunktion geben, als Report
model Ticket {
  id String @id @default(uuid()) @db.Uuid

  userFileId String   @db.Uuid // die id der Userakte
  userFile   UserFile @relation("UserFile", fields: [userFileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status           TicketStatus @default(OPEN)
  title String // kurze Beschreibung
  description      String //  Beschreibung

  category TicketCategory @default(OTHER) // Kategorie des Tickets

  Files TicketFile[] // Falls sceenshots hochgeladen werden wollen, dann hier speichern

  // moderatoren
  workedById String? @db.Uuid
  workedBy   User?   @relation("WorkedByUser", fields: [workedById], references: [id], onDelete: SetNull)

  // messages
  messages TicketMessage[]
}

model TicketMessage {
  id      String @id @default(uuid()) @db.Uuid
  content String // die eigentliche Nachricht

  createdAt DateTime @default(now())

  // absender
  authorId String @db.Uuid
  author   User   @relation(fields: [authorId], references: [id])

  // ticket relation
  ticketId String @db.Uuid
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

// cloudinary files for tickets -> cleanup muss per funktio erfolgen
model TicketFile {
  id       String @id @default(uuid()) @db.Uuid
  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String @db.Uuid

  url        String // die Cloudinary-URL
  publicId   String // die Cloudinary-Public-ID → wichtig zum Löschen!
  uploadedAt DateTime @default(now())
}

enum TicketStatus {
  OPEN
  CLOSED
  IN_PROGRESS
  CANCELED
}

model Chapter {
  id             String  @id @default(uuid()) @db.Uuid
  title          String?
  content        String
  image          String?
  publicId_image String? // notwendig zum löschen

  isDeleted Boolean @default(false) // wenn das Kapitel gelöscht wird, dann wird es hier auf true gesetzt

  // post relation
  postId String @db.Uuid
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade) // hier wird dann eingetragen zu welchem Post das Kapitel gehört
}

enum PostCategory {
  ENTERTAINMENT
  EDUCATION
  RAISING_CHILDREN
  FAMILY
  CULTURE
  NATURE
  TECHNOLOGY
  HEALTH
  LIFESTYLE
  TRAVEL
  FOOD
  FITNESS
  OTHER // für alle anderen Kategorien, die nicht in der Liste sind
}

model Post {
  id               String       @id @default(uuid()) @db.Uuid
  title            String
  quickDescription String // das wird dann in der Übersicht gezeigt, und beim Klick wird der Post geladen, das entlastet die Datenbank
  category         PostCategory @default(OTHER) // Kategorie des Posts

  image             String? // optional | claudinary
  publicId_image    String? // notwendig wenn man löschen will
  tags              String[] // array of strings
  forKids           Boolean  @default(false) // wenn für Kinder, dann hier die Altersbeschränkung
  ageRestriction    Int      @default(18) // wenn für Kinder, dann hier die Altersbeschränkung
  isCertifiedAuthor Boolean  @default(false) // wir wollten das Pädagogische Authoren Hervorgehoben werden

  // Capital Controlling | self-relations
  chapters Chapter[]

  authorId String? @db.Uuid
  author   User?   @relation("UserPosts", fields: [authorId], references: [id], onDelete: SetNull)

  moderatorId String? @db.Uuid
  moderator   User?   @relation("ModeratorPosts", fields: [moderatorId], references: [id], onDelete: SetNull)

  readByUser History[]

  published   Boolean   @default(false)
  publishedAt DateTime?

  // comments & Ratings
  comments Comment[] @relation("PostComments")
  ratings  Rating[]  @relation("PostRatings")

  // quiz
  quiz Quiz? @relation("PostQuiz") // quizId

  // admin meta
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  deletedBy     String?   @db.Uuid // userId
  deletedByUser User?     @relation("PostDeletedBy", fields: [deletedBy], references: [id], onDelete: SetNull)
  deleteReason  String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  popularityScore Int      @default(0)
}

model Quiz {
  id     String @id @default(uuid()) @db.Uuid
  postId String @unique @db.Uuid
  post   Post   @relation("PostQuiz", fields: [postId], references: [id], onDelete: Cascade)


  // questions
  questions QuizQuestion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  History History[] // hier wird gespeichert, ob und wann der User das Quiz gelöst hat
}

model QuizQuestion {
  id     String @id @default(uuid()) @db.Uuid
  quizId String @db.Uuid
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  question String // die Frage

  // answers
  answers     QuizAnswer[]
  explanation String? // erklärung der richtigen Antwort

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuizAnswer {
  id         String       @id @default(uuid()) @db.Uuid
  questionId String       @db.Uuid
  question   QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  answer    String // die Antwort
  isCorrect Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// wie genau soll das aussehen?
model History {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String   @db.Uuid
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  readAt DateTime @default(now())

  quizId String? @db.Uuid // if the post has a quiz, then this is the quizId
  quiz   Quiz?   @relation(fields: [quizId], references: [id], onDelete: SetNull)

  attempts   Int       @default(0)
  solvedQuiz Boolean?
  quizScore  Int?
  solvedAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId]) // unique constraint to avoid duplicates
}

// Example: Get count of Likes and Dislikes for a post
// const likes = await prisma.rating.count({
//   where: { postId: '...' , value: 1 },
// });
// const dislikes = await prisma.rating.count({
//   where: { postId: '...' , value: -1 },
// });
// console.log({ Likes: likes, Dislikes: dislikes }); // { Likes: 1943, Dislikes: 204 }

// Example: Get sum of Likes and Dislikes for a post (if you store values differently)
// const { _sum } = await prisma.rating.aggregate({
//   where: { postId: '...' },
//   _sum: { value: true },
// });
// console.log(_sum); // { value: ... }

model Rating {
  id     String  @id @default(uuid()) @db.Uuid
  postId String  @db.Uuid
  post   Post    @relation("PostRatings", fields: [postId], references: [id], onDelete: Cascade)
  userId String? @db.Uuid
  user   User?   @relation("UserRatings", fields: [userId], references: [id], onDelete: SetNull)

  value     Int // 1 = like, -1 = dislike
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  deletedBy     String?   @db.Uuid // userId
  deletedByUser User?     @relation("RatingDeletedBy", fields: [deletedBy], references: [id], onDelete: Cascade) // userId -> hier wird dann eingetragen wer den Kommentar gelöscht hat
  deleteReason  String?

  @@unique([postId, userId]) // jeder user kann nur einmal bewerten
  @@index([postId])
  @@index([userId])
}

model Comment {
  id          String @id @default(uuid()) @db.Uuid
  postId      String @db.Uuid // zu welchem Post gehört der Kommentar
  post        Post   @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  userId      String @db.Uuid // wer den Kommentar geschrieben hat
  user        User   @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  thanksCount Int    @default(0) // wie oft geliked

  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // das antworten von Ids möglich machen
  parentId String?   @db.Uuid // zu welchem Kommentar gehört der Kommentar
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  isDeleted     Boolean         @default(false)
  deletedAt     DateTime?
  deletedBy     String?         @db.Uuid // userId
  deletedByUser User?           @relation("CommentDeletedBy", fields: [deletedBy], references: [id], onDelete: SetNull) // userId -> hier wird dann eingetragen wer den Kommentar gelöscht hat
  deleteReason  String?
  CommentRating CommentRating[]

  @@index([postId]) // index for faster queries
  @@index([deletedAt])
}

model CommentRating {
  commentId String  @db.Uuid
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade) // welcher kommentar hat die bewertung

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // wer hat die bewertung abgegeben

  value Int // 1 = like, -1 = dislike

  @@id([commentId, userId]) // composite primary key
  @@unique([commentId, userId])
}

/* Feedback */
model Feedback {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String?  @db.Uuid
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  content   String
  rating    Int      @default(0)
  allowedToPublish Boolean @default(false)
  readed Boolean @default(false)
  
  responses FeedbackResponse[]
  
  createdAt DateTime @default(now())
  isDeleted Boolean @default(false)
}

model FeedbackResponse {
  id         String   @id @default(uuid()) @db.Uuid
  feedbackId String   @db.Uuid
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  adminId    String   @db.Uuid
  admin      User     @relation(fields: [adminId], references: [id])
  content    String
  sentViaEmail Boolean @default(false) // ob die Email bereits versendet wurde
  
  createdAt DateTime @default(now())
}

enum NotificationType {
  FRIEND_REQUEST // Freundschaftsanfrage
  FRIENDSHIP_ACCEPTED // Freundschaft angenommen
  COMMENT // Antwort auf Kommentar / Kommentar auf Post
  NEW_MESSAGE // Neue Nachricht mit freunden etc 
  APPLICATION_STATUS_CHANGE // Statusänderung der Bewerbung
  TICKET_UPDATE // status, neue Nachricht im Ticket
  SYSTEM // alles was admins machen etc
}

model Notification {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  content   String // Inhalt der Benachrichtigung
  isRead    Boolean @default(false) // ob die Benachrichtigung gelesen wurde
  createdAt DateTime @default(now())
}